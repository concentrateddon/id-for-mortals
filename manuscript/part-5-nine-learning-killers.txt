{sample: true}
# Part 5: Nine Learning Killers #
There's a lot you can do to create a better learning environment and experience, but there's a lot you can do to make them worse, too. In this Part, we'll explore some of the "don'ts" of instructional design, as well as some of the built-in behaviors that can get in the way of learning.

# 1. Overteach
Teach students what they need to know, right then. Don’t try to teach what you, as the instructor, want them to know.

It’s easy to bring your own agenda into a class. After all, you’re the instructor — you literally set the agenda. But the biggest area where I see instructors fail is in teaching what they want students to know, not what students need to know.

Most instructors and instructional designers are familiar with the idea of setting and communicating objectives. If your class is broken into modules, or your book is broken into chapters, you typically start out by stating your objectives. One of my publishers, Manning, has a standard where each chapter starts with a bullet list titled “In this Chapter.” Microsoft Official Curriculum modules start with a module overview that includes the module objectives. Those objectives are what you plan to teach.

Most instructional designers will also agree that objectives should be active, which is why you’ll often see rules like “objectives must start with a gerund.” So, an objective like “SQL Server auditing” wouldn’t be acceptable, but one like “Configuring SQL Server auditing” would be fine, because it starts with a gerund. That’s supposed to make the objective seem more active. I’m not teaching you the feature, I’m teaching you how to configure the feature. That’s a task you complete. It’s a good objective.

Well, no. It isn’t. Nobody wakes up in the morning with a hankering to do that. Configuring, and a huge number of other objectives I see in courses, is a means to an end. It’s what you do in order to achieve what you woke up hankering to do. It’s a step. A process.

I dislike objectives in courses and in books. Each instructional unit — each chapter, or module, or lesson, or whatever you call it — should focus on one need. What is it that the student needs to accomplish? Title the instructional unit to clearly describe the need you’re meeting, and everything else falls into place.

As an aside, instructional designers do have language for this concept. In their terms, I’m setting the chapter title as a terminal objective, and I might use one or more enabling objectives to get there. I still think that structure leaves a lot of room for an instructor to get sidetracked, though. I’d rather state what it is I’m going to teach you, and then ensure that every single word out of my mouth, or on the page, leads directly to that goal.

I might title a chapter something like, “Capturing User Activity by Using SQL Server Auditing.” That’s a statement of something a student might truly want and need to know — how to capture user activity. It’s a job task. It’s a human-level task, something the boss might tell you to do. It scopes the chapter to a particulate technical feature, but the statement is clear about the real-world ability you’re going to be learning.

You then have to be really, really careful about what you teach to lead to that goal. The line between what the instructor wants to teach and what the student needs to know can be really fine.

Let’s take a non-technical example. I’m teaching a class, and we’ve gotten to a module I’ve named “Using a Car to Drive to the Supermarket.” That’s a pretty clear title, although instructionally I may have several sub-tasks I need to teach: starting the car, putting it into reverse, and so on. Those are things the student needs to know in order to achieve the goal stated in the module’s name. You can’t get to the market without starting the car and learning to steer it in different directions.

As an instructor, I want my students to be well-informed. I want them to be smart. I also want to impress them with my own knowledge, so that they think I’m smart and give me a good evaluation at the end of class. And so I decide that they need to know how the brakes on the car work. You depress the brake pedal, an electrical signal goes to the master brake cylinder, and that cylinder compresses and pushed brake fluid to the brakes.

Wrong.

Students do not need to know that. Knowing that information does not in any way help them achieve the goal stated in the name of the module. It might help them with other goals, like troubleshooting or fixing the brakes, but that wasn’t the deal we made with them when we named the module. What they need to know is that you stomp on the brake pedal and the car stops. That’s it.

Here’s why: human brains can only absorb a certain amount of information in a given period of time. After that, those brains literally need to sleep on it, allowing the brain’s natural background processes to organize the new data, make relations and connections to existing data, and get everything neatly filed in the neural data store we call “memory.” Feed someone too much information at once, and the brain goes into an automatic triage mode: I can’t possibly remember all of this. Let’s see if I can figure out what’s important, and I’ll just store that. The problem is that this triage mode isn’t under conscious control, so the student doesn’t get to decide what’s extraneous and what’s vital. The brain makes that decision almost instantly, based on its ability to connect new information with existing information. In other words, the student’s brain might decide that the whole tangent on master brake cylinders was the important bit, and not actually capture the critical fact that stomping on the brake stops the car.

So you must not introduce extraneous information. Teaching isn’t about what you want someone to learn, it’s about what they need to learn in order to absorb the skills that you promised to deliver when you sold them the class, the book, or whatever.

I teach a lot of Microsoft Official Curriculum courses. Microsoft has a lot of challenges when it comes to courseware, not the least of which is the highly variable quality and approach of their certified trainers. In one instance, I was teaching a class that had previously been taught by another guy at the same facility. That man knew this material cold, and a lot more besides. He knew the product inside-out, upside-down, and sideways. He took every minute of the recommended delivery time, and then some, running students from 8:00am to 5:00pm every day, and even shortening lunches sometimes to pull in extra time.

When I taught the class, we went from 9:00am to 3:00pm, had a full hour for lunch, and my students were measurably better at retaining and applying the skills that the course had promised to teach.

The difference? I threw in no tangents. I added no extra information. I didn’t try to prove I was smarter than anybody, and I taught the class with no regards for what I wanted the students to learn. I took the course’s top-level outline — what students had seen when they paid for the class — as what they needed to learn, and I taught nothing that didn’t directly lead to those needs. The fact that I had a shorter day kept my students fresher, meaning they didn’t hit the “fatigue wall” in the afternoon and stop learning outright. Their brains didn’t have to go into triage mode and start indiscriminately dropping new information. They walked away feeling more confident that they’d captured everything I’d taught, because I hadn’t overloaded them with a firehose of information.

When I first started writing, I wrote long-form IT books. I had no real page count limit, and these things would be 600, 800, or even 1,000 pages long. Then I managed to land a monthly column in a trade magazine, where I’d be allotted just 800 words each month. My editor at the time, Keith Ward, told me that writing an 800-word column would make me a better writer pretty quickly, because I’d learn the precious value of every single word. He was correct. These days I have trouble writing books of more than 300 or 400 pages, because I’ve learned to be more concise, and to stay on-topic. My books are better not because they’re shorter, but because they do a better job of teaching — in large part because they’re more concise. That’s the real purpose of the principle I’m writing about, here: be concise.

There’s another lesson here, which is the implicit contract created between an instructor or author and his students or readers. When you name a chapter, or provide a list of objectives, or whatever, you’re promising to deliver just that. If students walk away feeling like they haven’t learned that, then they feel cheated — even if the “failure” was you pushing so much information at them that their brains couldn’t cope. In other words, if you over-teach, you may well fail to deliver on that implicit contract.

The implicit contract is also important in preparing the brain to learn. These are the things you will know, you’re telling each student. This is what I will teach you. That statement can actually help position their brains to learn those things — provided you stick to the contract and don’t wander off-message.

This brain behavior is built-in, and you see it used in all kinds of different situations, often to great effect. Magicians, for example, rely heavily on the fact that our brains will look for whatever we’re told to look for — and they use that to distract us while they’re palming the card or getting a dove from their coat pocket. The minute our brains are told what to expect, we start subconsciously looking for that. So it’s important that, once you’ve created the contract on what a module or chapter will cover, you immediately start delivering on that contract. Every concept you introduce must be explicitly connected to what you said you’d teach.

“I’m going to teach you how to stop a car. Before I get into the actual procedure, I need to talk a bit about momentum, because the concept of momentum is going to affect the procedure.” In that sentence, you’re acknowledging that you’re about to seemingly go off-topic, but you’re immediately providing a connection back to the promised topic. “The more momentum you have, the harder you will have to brake in order to stop the car at the same stopping point.” Now you’ve firmly connected the procedure to your tangent. More momentum, more braking, students’ brains will think. Got it. Now you can go into more detail about what momentum is — but keep it relevant. Don’t discuss Isaac Newton — he may have discovered momentum, but he does nothing to further the contracted goal of stopping the car. Keep the momentum diversion as brief as possible: “The faster your car is going, the more momentum you build up. That momentum must be reduced to zero in order to stop the car. The brakes can reduce momentum, but the more you’ve built up, the faster you’ll have to reduce it in order to stop at a given point.”

So what about student curiosity? What about the student who is really clever, totally grasps what you’re teaching, and wants to know some of the underlying details?

Curiosity is good, and should be encouraged — but not at the expense of the less-curious in class. Instead of going off on a more-detail tangent just to prove that you, as the instructor, really do know this stuff, encourage independent exploration. Build “further reading” references into your instructional materials, and encourage curious students to explore. By doing so, you’ll achieve two goals. First, curious people usually enjoy independent exploration, and by encouraging it you’re encouraging a smarter person. Independent exploration engages a number of higher brain functions, and often helps a student’s brain better cement new knowledge. Second, you’re keeping the rest of the class on-track. Unless you and the curious student can leave the room — something not possible in a book, by the way — you’re putting your tangent in front of everyone. Folks will listen to even a “private” in-class conversation, to be sure they’re not missing something, and now you’re bombarding everyone with extra information. Brain goes into triage mode, class success level goes down.

In books, tangents are often styled as sidebars. They’re often set aside visually in some way, perhaps with a gray background or in a box. Readers are often told to ignore them. The *Dummies* books (and I did write one of those) label them as something like, “Dumb Stuff You Don’t Need to Know.” Problem is, you can’t stop someone from reading, and they’ll often do so because they fear “missing” something. If they don’t need to know it, don’t put it in the book. Period.

Many of the classes I teach include remote students. Early on, I would shut off my microphone during labs, so that I could discuss issues with each student individually. I relied on the full-room microphone in the ceiling to let remote students know I was still in the room. I’d get into “expanded” discussions with a curious student, and the remotes would invariably, to a person, complain that they couldn’t hear me. I wasn’t talking to them, but they were worried they were missing something. Once I realize that I was breaking my own rule of not introducing tangents, I stopped doing the side discussions. Maybe on breaks, or during lunch, outside the classroom, where it’s more clear that the conversation is private, but never in class.

Mick was right: you can’t always get what you want. But if you try sometimes, you might find you get what you — or rather, your students — need. When you begin a new unit of instruction, clearly state what students will learn. Do so in terms that are meaningful to the student’s life — state goals that represent real-world tasks and abilities. Ensure that every word out of your mouth, or every word written on the page, ties directly to that goal. Teach nothing that does not apply directly to that goal. Teach what they need, and not what you want them to know.

Students have a limited ability to learn in a fixed period of time. Make sure you're focusing on the most crucial items, and teach only those. You'll help students be more effective when you take on the responsibility of triaging the information.

{sample: true}
# 2. Don't Tell a Story
Remember that our brains are designed to construct stories, based largely on causality, to help us learn. _Cause-effect_ is deeply embedded in who we are. A great way to make learning less effective, then, is to forget that. 

This is an example I've touched on before, but it's so common I'll bring it up again. It's _incredibly_ common to see newer instructional designers try to front-load concepts. _Before I can teach you about car maintenance, I need to go into the whole history of the combustion engine, Henry Ford's assembly line concepts, and so on_. Even if you "tell a story" about those things, you're not helping someone achieve the outcome they came for. You're not placing _them_ into the story, because that particular story has no place for the learner. You're not even telling them how all of that prologue material will eventually help them be better at car maintenance.

The dangerous part about this, and the reason it remains a pernicious problem in the world of adult education, is that human brains are _very_ good at learning. You can give someone a horribly designed set of learning materials and in many cases they'll still be able to learn. They might not learn as well, and they might not learn as fast, and they might not retain as much, but we rarely measure those things. So it can _seem_, from the outside, like people can learn equally well no matter how badly you design the experience. That's obviously not true, though.

One reason I think storytelling doesn't get as much respect as it should is that it's just harder. Take nearly any topic that an adult might want to learner and it's simply easier to create an outline where you lay out some background concepts, and then lob facts at the learners until their eyes bleed. Break for lunch, repeat. Issue a certificate, class complete. It's _easy_. Building a story is _hard_. Building a story requires you to triage what you're going to teach, because the nature of storytelling limits how much you can do. Those are _good_ limits, because they reflect they very real biological limits of our brains, but _not_ storytelling is nice because it lets you ignore those limits and just firehose facts at people.

Consider a brainstorming session, where you and some other experts are creating a course that will teach people how to frame a wall. During a brainstorming session, it's poor form to say "no;" you just let the ideas come and try to capture them all. So you might get a list like this:

* Compressive strength of wood
* Torsion strength of wood
* Building codes regarding stud spacing
* Wall top and bottom plate attachment
* Calculating nail type for a given load
* How to operate a pneumatic nail gun
* How to toe-nail a stud into a floor plate
* Building code requirements for fire breaks
* Maximum wall span for load-bearing walls

And so on. That's great, and you could absolutely build a table of contents from all that. It might look like this:

1. Understanding Loads and Limits
	1. Compressive strength of wood
	2. Torsion strength of wood
	3. Nail pull and shear strength
2. Understanding Building Codes
	1. Stud Spacing
	2. Fire Breaks
	3. Wall span lengths
3. Building Techniques
	1. Using nail guns
	2. Toe-nailing techniques
	3. Wall and top plate attachment

For a _reference book_, that might be a great table of contents. References aren't designed to _teach_, they're designed to help you _remember things_, and those things are usually facts and figured. References are a good and necessary thing in many fields. But they don't _teach_. 

If my outcome, my end goal, is to learn to frame a wall, where does "compressive strength of wood" come into my story? It probably doesn't. I'm not looking to engineer new building codes. Go out into the world and look at homes being built. The people framing the walls pretty demonstrably are not concerned about torsion and compression. Building codes? Absolutely, they probably have them memorized. But _is that where they started_ when they learned to frame a wall? Does memorizing building codes make a sensible start to my story? Probably not. And this is why so many instructional designers eschew storytelling. It's harder.

I'd probably start the story with a brief mention of what walls are designed to do, like supporting a roof and separating rooms. I might show how a single horizontal piece of wood, with enough weight applied to the middle, cracks in half. That's a _problem_, I'd point out, and then I'd introduce vertical studs as the solution to that problem. We'd put a couple of studs into a long span and show how, with enough weight, the top horizontal span still breaks. A _problem_. I'd ask my learners to consider a solution, and they'd doubtlessly arrive at "more studs, spaced closer together." I'd introduce the building codes that mandate studs be 16" on center, and go through an exercise of measuring out 16" intervals on a floor plate. I'd point out that the floor plate was pretty apt to slip and slide all over. A _problem_. So we'd discuss properly attaching it to the base, and that would lead naturally to the discussion on toe-nailing the studs in place. Of course, we'd need to use the nail gun for that, and I'd start by nailing a mannequin hand into a piece of wood. Well, that's a problem — what if that'd been _your_ hand? On to proper use of a nail gun, and then back to toe nailing.

All of these things fit into the story. They make sense; they're all needed to achieve the terminal objective of "frame a wall." But I've left stuff out. I don't need to teach about wood loads and such; building codes do that for me, and make it unnecessary for a practitioner to know or care. Only the things that lie I the direct path from my learner's starting point ("I don't know how to frame a wall") to their end point ("I know how to frame a wall") get covered. Anything else is a tangent, and doesn't belong in my story. Everything in my story is _relevant_ to my learner, and I've made that clear by introducing them to the problems that each of these things was meant to solve. I've made it _personal_. I've also made it hands-on, which helps develop stronger synaptic connections much faster, so I'll be a lot more confident in my learners' ability to recall these things. And, knowing me, I actually let them _look up_ things like stud spacing and nail gun safety from references I provides, so they've constructed their own personal mental model of how to remember these things, along with learning how to use those important references in the future.

That's how you design for people when you want them to really learn.

# 3. Forget to Level-Set
When instructional designers talk about storytelling, one thing that often comes up is a phase like, "know who your learner is at the beginning of the story, and carefully define who they will be at its end." Most of us are okay at the second part: it's easy to list the real-world tasks that we want someone to learn to accomplish, for example, and those become our learning experiences' _terminal objectives_. That's _terminal_ as in, _end_; it's the end goal for the course.

But not everyone is so good at the first part, where we define who our learners are _before_ the story begins. What have they already learned to do in life, that would be relevant to our story? What problems are they facing that have brought them to us to learn? If the terminal objective is a task, _why_ do they want to perform that task? 

These questions tell us a lot about who will be able to learn from what we've got to teach. Let's take framing a wall again: if my learners are 16 year-old kids, I'm going to build a very different story than if they're 30 year-old men and women, right? Those two audiences have very different backgrounds and experiences. I'm going to have to use different analogies to find common ground with those two audiences, and it's likely I wouldn't be as successful if my learning experiences included people from both groups. They might both have the same outcomes in mind, but they're starting in very different places, which means they're going to have different journeys, which means they're going to need different stories.

Learners also deserve to have expectations about where they're going. If an 18 year-old is hoping to get a job in construction, that's very different from a 40 year-old who's looking to do a little do-it-yourself home remodeling. They're going to expect different outcomes from their learning experience, and so I need to start out by understanding that expectation, and being very clear about whether or not the experience I've designed is going to meet that outcome. I also need to be clear about what the story won't cover. "You're going to be learning to frame a wall. Now, I need to point out that this is focused on basic residential framing. Commercial building have whole different sets of rules. We're also not going to be looking at any of the licensing or permitting that might be required, even for a small do-it-yourself project. This is just the basic mechanics of framing. It'll be good for adding an interior partition wall to your house, for example." That helps put everyone on the same page with what they'll truly be able to _do_ when they're finished with me.

This doesn't mean you need to fill your introduction with disclaimers; you're not trying to "cover your ass" or anything. But you do need to make sure you're giving an accurate description of what an expected outcome would be, and make sure you're clearly stating where you expect your learners to be starting. "I'm assuming you're already skilled with basic hand tools like hammers, and that you know how to use basic personal protective equipment like gloves and safety glasses. I'm also assuming you're mainly into this for home DIY projects, not for something larger or something commercial." 

Just get everyone on the same page _up front_, both with where you're starting, and where you're going.

# 4. Wreck the Delivery
I wrote in the front of this book that I regard instructional design, authoring, and delivery to be distinct things, and that I wasn't going to touch on delivery much. _Much_. 

The reality is that instructional delivery is where the rubber meets the figurative road, and the best way to kill a well-designed course is to let a poor instructor deliver it. So it's worth thinking, _as a designer_, about how to build learning experiences that easily lend themselves to a good delivery, while requiring an effort to botch the delivery. It's not absolute and it's not foolproof, but it can make all the difference in "borderline" situations. A bad delivery isn't necessarily the designer's fault, but a good designer can do a lot to mitigate a bad delivery.

First, sequencing your material into a well thought-out storyline is the best defense against a bad delivery. With a tight enough storyline, you make it difficult to teach things out-of-order without it not being really apparently awkward. Provide delivery notes that _really_ discourage instructors from going off on tangents. Plenty will want to do so, in part because it makes them feel like they're "adding value" to the course rather than just reciting it, and because it lets them demonstrate their expertise. You can't stop that desire, but you can manage it. Try to anticipate the tangents you can, and provide an explicit place for them. Perhaps that's at the end of the learning experience, or perhaps it's in "sidebars" that you position at the end of a learning session. Yes, I've already discussed how I generally dislike sidebars, but we're talking about compromise, here. By positioning "sidebars" at the end of a session, you can at least exercise some control over it. You can call them out as what they are, indicate that it's "above and beyond" information, and help students understand that it's okay to mentally check out of they need to. Encourage instructors to use those sidebar times as the place to show off and add value, and to work with their higher-performing learners to expand their horizons.

Well-designed _instructional aids_ can also be useful. For example, providing leading questions that can help an instructor engage their class can keep the environment more engaging and interactive. Providing practical experiences, such as hands-on activities, can be useful, and even more so when they're built in a constructionism style that relies on the instructor to be a facilitator. 

Remember, too, that the point of constructionism is largely to take instructors out of the picture and make learners into self-instructors. You'll need to _sell_ your instructors on that concept, in most cases, by making a clear case for constructionism and outlining concrete activities and tasks for the instructors to take on. Provide "to-do" lists for instructors, such as having them introduce reference materials or tools at specific points, encourage the use of those at other points, and so on. Continually exhort instructors to give learners the space and time they need to fail and recover on their own. Provide pre-made tips that instructors can relay to learners, for those "I'm stuck" situations that you can anticipate. Providing slide decks, while technically outside the realm of an instructional designer as I've define it, is another way to exercise more control of the delivery experience, minimize unnecessary distractions, and so on.

Another trick — again, because few instructors want to be seen as merely "reading from the book" like a vocalizing monkey — is to provide separate instructor materials that include additional analogies, examples, and sub-stories that students themselves don't receive directly. This allows instructors to "add value" in a way that stays entirely within your overall story arc and instructional framework.

While an instructional designer, again within my limited definition of the role, might not be the one delivering what they design, they _can_ help ensure a better delivery by _also designing the delivery itself_. Understanding how instructors approach learning experiences, accommodating _their_ needs (just as you do the learners'), and providing a story _for them_ is a great way to make a learning experience that ultimately delivers a better win for the people it's meant to benefit the most.

# 5. Leave Objectives Unstated
I got into this a bit in number 3, above, but I want to go into this idea of terminal objectives a bit more specifically, and with a broader reason in mind.

You should never set out to teach unless you have a _terminal objective_ in mind. That is, what is it that you're teaching, and why would a student care? Terminal objectives should be _tasks_ in most cases, and should usually be some activity or behavior that an outsider could objectively observe and measure. For example, if you're teaching someone to draw a picture, then that drawing becomes the outcome; if you're teaching someone to create a new traffic plan for an intersection, then the plan is the outcome. Anyone could see that those outcomes exist or not, and so those make final terminal objectives.

Objectives create an agreement, or a contract of sorts, with your learner. They're a promise for why everyone is sitting down and doing all of this. Leaving objectives unstated or implied makes your teacher-learner agreement vague and unknowable. That's bad for learners, because their brains won't know what the point of it all is, and their brains may start accidentally filtering out the wrong information as you go. By knowing the destination up front, learners' brains can focus on that destination, and make sure they're picking up all the intermediate steps along the way. 

Terminal objectives also help keep you, as the teacher, honest. For every single thing you add to a learning experience, ask yourself, "how is this moving us directly toward the terminal objectives?" If you answer yourself with something like, "well, it doesn't exactly, but it's still good to know," then you need to drop whatever it is. Anything that doesn't directly contribute to the terminal objectives doesn't belong: they're tangents, distractions, and an opportunity to exhaust your learners' attention spans. If you've got "nice to know" material you want to share, save it until _after_ the terminal objectives are met, in something like an appendix or afterword: "Hey, now that we're done, you might want to also look into this and that and this other thing. They're all great ways to start expanding your knowledge of this topic." 

I get into arguments (well, let's be polite and call them "debates") with people about whether terminal objectives should be explicitly called out at the start of a learning experience. Broadly speaking, yes, they should. I never really disagree with anyone on that. Where I disagree is _how_ to do so. Say you're writing a module for a course that will be delivered by an instructor, or creating a self-paced learning video, or writing a chapter for a book. _I_ believe that those units - the chapter, the video, or the module - should each focus on just one terminal objective. They should be short, usually under an hour apiece, and even shorter if you can pull it off. The _title_ of that unit, I believe, is where you communicate the terminal objective: "Planning Traffic Signal Timing," "Changing a Car Tire," "Installing a Vertical Stabilizer," "Changing a Faucet." Those titles start with a _gerund_, an active verb ending in _-ing_. Those are all _tasks_, and they speak to externally observable outcomes. If you do nothing but say the title aloud, any learner should be able to clearly explain what they believe they're about to learn, and what they'll be able to do afterwards. What I don't personally think you need to do is then have a formal slide, page, bullet list, or whatever that spells out the point of the learning session. No, "here's what you'll learn" section, none of that. 

I'll often see people list the _enabling objectives_ they plan to use. I won't go so far as to say it's wrong, but I do feel it's useless. You've already told the learner, in the title, that you plan to teach them to change a faucet. It should go without saying that they're going to learn to use a basin wrench, for example, or that they're going to use Teflon tape. I don't feel you need to waste time listing all those steps - students will be countering them in a good sequence anyway. Listing those enabling objectives up front is simply dumping information into the learners' brains - information which, at that exact point in time, does them no good at all. Enabling objectives aren't the goal; they're the steps along the way to the goal. Consider the navigation app you've probably used on your phone: _you_ state the goal, which is your destination. When you hit "Start," does your phone read off all the turns you're about to make? Nope. It waits until you need each piece of information and reveals it then. Sure, you _could_ review the route ahead of time, but unless you're just checking to make sure it's keeping you off the 405 during rush hour (or whatever), there's no real benefit in doing so. That's not an exact analogy, of course, but hopefully you get the idea I'm trying to express.

# 6. Ignore the Attention Span
You, as a teacher, can't always get what you want, and that's especially true if what you want is for your students to pay close attention for a long period of time. As an instructional designer, one key thing you are responsible for is limiting the scope of what your material attempts in a single learning session, whether that's an hour in a class, a video someone is watching, or a chapter someone is reading. You can't necessarily ensure that the _delivery_ will respect the limits you've built into your material, but you can certainly try and do the right thing up front.

Most adults need to know within 5 minutes what they're going to get from a session - that is, they need to know the intended outcome, or terminal objective, that they're aiming for. Once they know it, you've usually got less than 30 minutes to get to the point, and even that's often pushing it. Your total delivery time might be targeted at about an hour, but anything more than _that_ probably means your terminal objective is too broad; you need to break it down and teach one thing at a time. For example, "maintaining a car" is too broad; you need terminal objectives that are a bit tighter, like "changing the oil in a car," "checking the tire pressure," and so on. That lets your learners go from zero to a meaningful outcome in under an hour apiece.

That "30 minutes to get to the point" is really important, and you should try and get the actual time as small as possible. What this time cover is usually "background material." For example, teaching "how to change the oil in a car" might require a quick word on why oil is important to the car's engine, so that you can establish the problem that learners will try and solve. You might need to spend a bit of time explaining how oil breaks down over time, and how it picks up dirt and grime, making it less effective at lubricating. You might even show some old and new oil to drive that point home. All that "up front" might take all of 5 minutes, which is perfect - that's well under 30 minutes, and lets you get to the point of actually changing the oil quickly. 

So my guidelines are usually:

* Cover background in as little time as possible, definitely under 30 minutes.
* Get to a meaningful outcome in under an hour after you start, including background material coverage time.
* If you can't do this, you need smaller terminal objectives and/or less background material.

# 7. Lose Touch
(Need to repeatedly assess if your learners are following along, either through formal assessment tools or informal class management, but neither can just be stupid trivia questions. Commit to it.)

# 8. Train
(Versus teaching)

# 9. Prevent Failure
(Anticipating failure is great, because you can teach to it; don't try to structure learning in a way that avoid it, because that's how we learn).
